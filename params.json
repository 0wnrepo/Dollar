{"name":"Dollar.$wift","tagline":"A functional tool-belt for Swift Language similar to Lo-Dash or Underscore in Javascript","body":"$ is a Swift library that provides useful functional programming helper methods without extending any built in objects. It is similar to Lo-Dash or Underscore in Javascript.\r\n\r\n![Introducing Swift](https://photos-1.dropbox.com/t/0/AACo6GShgnQuB8SEmSTtmhFNa9IgIrznxBWhlQgpnVCHCw/12/506592/png/2048x1536/3/1403056800/0/2/hero.png/m-lCQpr7LCGx9U0nE04UNlPw8RN9psyVdefYFKYZdC0)\r\n\r\n## Contents ##\r\n\r\n- [Setup](#setup)\r\n- [Usage](#usage)\r\n  - [Array](#array-methods)\r\n  - [Dictionary](#dictionary-methods)\r\n  - [Object](#object-methods)\r\n  - [Function](#function-methods)\r\n  - [Chaining](#chaining)\r\n- [Examples](#examples)\r\n  - [Array](#array)\r\n  - [Dictionary](#dictionary)\r\n  - [Object](#object)\r\n  - [Function](#function)\r\n  - [Chaining](#chaining---array-)\r\n- [Contributing](#contributing)\r\n- [Roadmap](#roadmap)\r\n- [Why?](#why-not-extend-collection)\r\n\r\n## Setup ##\r\nInclude the `Dollar.swift` into your project and import the library using `import Dollar`\r\n\r\nCurrently there are issues loading the library using `pod 'Dollar', '~> 0.2'`\r\n\r\n## Usage ##\r\n\r\n### Array Methods ###\r\n\r\nMethod | Usage\r\n---- | ---------\r\n**`$.at`**|Creates an array of elements from the specified indexes, or keys, of the collection. Indexes may be specified as individual arguments or as arrays of indexes.\r\n**`$.compact`**|Creates an array with all nil values removed.\r\n**`$.contains`**|Checks if a given value is present in the array.\r\n**`$.difference`**|Creates an array excluding all values of the provided arrays\r\n**`$.every`**|Checks if the given callback returns true value for all items in the array.\r\n**`$.find`**|Iterates over elements of an array and returning the first element that the callback returns true for.\r\n**`$.findIndex`**|This method is like find except that it returns the index of the first element that passes the callback check.\r\n**`$.findLastIndex`**|This method is like findIndex except that it iterates over elements of the array from right to left.\r\n**`$.first`**|Gets the first element in the array.\r\n**`$.flatten`**|Flattens a nested array of any depth.\r\n**`$.frequencies`**|This method returns a dictionary of values in an array mapping to the total number of occurrences in the array. If passed a function it returns a frequency table of the results of the given function on the arrays elements.\r\n**`$.indexOf`**|Gets the index at which the first occurrence of value is found.\r\n**`$.initial`**|Gets all but the last element or last n elements of an array.\r\n**`$.intersection`**|Creates an array of unique values present in all provided arrays.\r\n**`$.join`**|Joins the elements in the array to create a concatenated element of the same type.\r\n**`$.last`**|Gets the last element from the array.\r\n**`$.lastIndexOf`**|Gets the index at which the last occurrence of value is found.\r\n**`$.rest`**|The opposite of initial this method gets all but the first element or first n elements of an array.\r\n**`$.noop`**|A no-operation function.\r\n**`$.max`**|Retrieves the maximum value in an array.\r\n**`$.merge`**|Creates an array of all values, including duplicates, of the arrays in the order they are provided.\r\n**`$.min`**|Retrieves the minimum value in an array.\r\n**`$.pluck`**|Retrieves the value of a specified property from all elements in the array.\r\n**`$.pull`**|Removes all provided values from the given array.\r\n**`$.range`**|Creates an array of numbers (positive and/or negative) progressing from start up to but not including end.\r\n**`$.sequence`**|Creates an array of an arbitrary sequence. Especially useful with builtin ranges.\r\n**`$.remove`**|Removes all elements from an array that the callback returns true.\r\n**`$.slice`**|Slices the array based on the start and end position. If an end position is not specified it will slice till the end of the array.\r\n**`$.sortedIndex`**|Gives the smallest index at which a value should be inserted into a given the array is sorted.\r\n**`$.union`**|Creates an array of unique values, in order, of the provided arrays.\r\n**`$.uniq`**|Creates a duplicate-value-free version of an array.\r\n**`$.without`**|Creates an array excluding all provided values.\r\n**`$.xor`**|Creates an array that is the symmetric difference of the provided arrays.\r\n**`$.zip`**|Creates an array of grouped elements, the first of which contains the first elements of the given arrays.\r\n**`$.zipObject`**|Creates an object composed from arrays of keys and values.\r\n**`$.partition`**|Produces an array of arrays, each containing n elements, each offset by step. Stops after a partition is less than n length.\r\n**`$.partitionAll`**|Produces an array of arrays, each containing n elements, each offset by step. Continues after a partition is less than n length.\r\n**`$.partitionBy`**|Applies a function to each element in array, splitting it each time the function returns a new value.\r\n\r\n\r\n### Dictionary Methods ###\r\n\r\nMethod | Usage\r\n---- | ---------\r\n**`$.keys`**|Creates an array of keys given a dictionary.\r\n**`$.values`**|Creates an array of values given a dictionary\r\n**`$.merge`**|Merges all of the dictionaries together and the latter dictionary overrides the value at a given key\r\n**`$.pick`**|Creates a shallow clone of a dictionary composed of the specified keys.\r\n**`$.omit`**|Creates a shallow clone of a dictionary excluding the specified keys.\r\n\r\n### Object Methods ###\r\n\r\nMethod | Usage\r\n---- | ---------\r\n**`$.tap`**|Invokes interceptor with the object and then returns object.\r\n\r\n### Function Methods ###\r\n\r\nMethod | Usage\r\n---- | ---------\r\n**`$.after`**|Creates a function that executes passed function only after being called n times.\r\n**`$.bind`**|Creates a function that, when called, invokes func with the binding of arguments provided.\r\n**`$.partial`**|Creates a function that, when called, invokes func with any additional partial arguments prepended to those provided to the new function.\r\n**`$.times`**|Call a function n times and also passes the index. If a value is returned in the function then the times method will return an array of those values.\r\n\r\n### Chaining ###\r\n\r\n**`$(array: ...)`**\r\n\r\nMethod | Usage\r\n---- | ---------\r\n**`any`**|Returns true if callback function returns true for at least one element in the array\r\n**`all`**|Returns true if callback function returns true for all elements in the array\r\n**`each`**|Passes each element value to the callback function\r\n**`filter`**|Filters the arrary to elements for which the callback function returns true\r\n**`first`**|Returns the first element in the array and terminated the chain\r\n**`flatten`**|Flattens a nested array of any depth.\r\n**`initial`**|Gets all but the last element or last n elements of an array.\r\n**`map`**|Maps each element to the new value returned in the callback function\r\n**`slice`**|Slices the array based on the start and end position. If an end position is not specified it will slice till the end of the array.\r\n**`value`**|Returns the array after applying all of the chained operators on it.\r\n\r\n## Examples ##\r\n\r\n### Array ###\r\n\r\n### at - `$.at`\r\n\r\nCreates an array of elements from the specified indexes, or keys, of the collection. Indexes may be specified as individual arguments or as arrays of indexes.\r\n\r\n```\r\n$.at([\"ant\", \"bat\", \"cat\", \"dog\", \"egg\"], indexes: 0, 2, 4) \r\n=> [\"ant\", \"cat\", \"egg\"]\r\n```\r\n\r\n### compact - `$.compact`\r\n\r\nCreates an array with all nil values removed.\r\n\r\n```\r\n$.compact([3, nil, 4, 5]) \r\n=> [3, 4, 5]\r\n\r\n$.compact([nil, nil]) as NSObject[] \r\n=> []\r\n```\r\n\r\n### contains - `$.contains`\r\n\r\nChecks if a given value is present in the array.\r\n\r\n```\r\n$.contains([1, 2, 3, 1, 2, 3], value: 2) \r\n=> true\r\n\r\n$.contains([1, 2, 3, 1, 2, 3], value: 10) \r\n=> false\r\n```\r\n\r\n### difference - `$.difference`\r\n\r\nCreates an array excluding all values of the provided arrays\r\n\r\n```\r\n$.difference([1, 2, 3, 4, 5], [5, 2, 10]) \r\n=> [1, 3, 4]\r\n```\r\n\r\n\r\n### every - `$.every`\r\n\r\nChecks if the given callback returns true value for all items in the array.\r\n\r\n```\r\n$.every([1, 2, 3, 4], iterator: { $0 < 20 }) \r\n=> true\r\n\r\n$.every([1, 2, 3, 4]) { $0 == 1 } \r\n=> false\r\n```\r\n\r\n### find - `$.find`\r\n\r\nIterates over elements of an array and returning the first element that the callback returns true for.\r\n\r\n```\r\n$.find([1, 2, 3, 4], iterator: { $0 == 2 }) \r\n=> 2\r\n\r\n$.find([1, 2, 3, 4]) { $0 == 10 } \r\n=> nil\r\n```\r\n\r\n### findIndex - `$.findIndex`\r\n\r\nThis method is like find except that it returns the index of the first element that passes the callback check.\r\n\r\n```\r\nlet arr = [[\"age\": 36], [\"age\": 40], [\"age\": 1]]\r\nlet result = $.findIndex(arr) { $0[\"age\"] < 20 }\r\nresult \r\n=> 2\r\n```\r\n\r\n### findLastIndex - `$.findLastIndex`\r\n\r\nThis method is like findIndex except that it iterates over elements of the array from right to left.\r\n\r\n```\r\nlet arr = [[\"age\": 36], [\"age\": 40], [\"age\": 1]]\r\nlet result = $.findLastIndex(arr) { $0[\"age\"] > 30 }\r\nresult\r\n=> 1\r\n```\r\n\r\n### first - `$.first(array: AnyObject[])`\r\n\r\nGets the first element in the array.\r\n\r\n```\r\n$.first([1, 2, 3, 4])\r\n=> 1\r\n\r\n$.first([]) \r\n=> nil\r\n```\r\n\r\n### flatten - `$.flatten`\r\n\r\nFlattens a nested array of any depth.\r\n\r\n```\r\n$.flatten([[3], 4, 5]) as Int[] \r\n=> [3, 4, 5]\r\n\r\n$.flatten([[3], \"Hello\", 5]) as NSObject[] \r\n=> [3, \"Hello\", 5]\r\n\r\n$.flatten([[[3], 4], 5]) as Int[] \r\n=> [3, 4, 5]\r\n```\r\n\r\n### frequencies - `$.frequencies`\r\nThis method returns a dictionary of values in an array mapping to the total number of occurrences in the array. If passed a function it returns a frequency table of the results of the given function on the arrays elements.\r\n\r\n```\r\n$.frequencies([\"a\", \"a\", \"b\", \"c\", \"a\", \"b\"]) \r\n=> [\"a\": 3, \"b\": 2, \"c\": 1]\r\n\r\n$.frequencies([1, 2, 3, 4, 5]) { $0 % 2 == 0 }\r\n=> [false: 3, true: 2]\r\n```\r\n\r\n### indexof - `$.indexof`\r\n\r\nGets the index at which the first occurrence of value is found.\r\n\r\n```\r\n$.indexOf([1, 2, 3, 1, 2, 3], value: 2) \r\n=> 1\r\n\r\n$.indexOf([\"A\", \"B\", \"C\"], value: \"B\") \r\n=> 1\r\n\r\n$.indexOf([3, 4, 5], value: 5) \r\n=> 2\r\n\r\n$.indexOf([3, 4, 5], value: 3) \r\n=> 0\r\n\r\n$.indexOf([3, 4, 5], value: 2) \r\n=> nil\r\n```\r\n\r\n### initial - `$.initial`\r\n\r\nGets all but the last element or last n elements of an array.\r\n\r\n```\r\n$.initial([3, 4, 5]) \r\n=> [3, 4]\r\n\r\n$.initial([3, 4, 5], numElements: 2) \r\n=> [3]\r\n```\r\n\r\n### intersection - `$.intersection`\r\n\r\nCreates an array of unique values present in all provided arrays.\r\n\r\n```\r\n$.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]) \r\n=> [1, 2]\r\n```\r\n\r\n### last - `$.last`\r\n\r\nGets the last element from the array.\r\n\r\n```\r\n$.last([3, 4, 5]) \r\n=> 5\r\n```\r\n\r\n### lastIndexOf - `$.lastIndexOf`\r\n\r\nGets the index at which the last occurrence of value is found.\r\n\r\n```\r\n$.lastIndexOf([1, 2, 3, 1, 2, 3], value: 2) \r\n=> 4\r\n```\r\n\r\n### rest - `$.rest`\r\n\r\nThe opposite of initial this method gets all but the first element or first n elements of an array.\r\n\r\n```\r\n$.rest([3, 4, 5]) \r\n=> [4, 5]\r\n\r\n$.rest([3, 4, 5], numElements: 2) \r\n=> [5]\r\n```\r\n\r\n### noop - `$.noop()`\r\n\r\nA no-operation function.\r\n\r\n```\r\n$.noop() \r\n=> nil\r\n```\r\n\r\n### min - `$.min`\r\n\r\nRetrieves the minimum value in an array.\r\n\r\n```\r\n$.min([2, 1, 2, 3, 4]) \r\n=> 1\r\n```\r\n\r\n### max - `$.max`\r\n\r\nRetrieves the maximum value in an array.\r\n\r\n```\r\n$.max([1, 2, 3, 4, 2, 1]) \r\n=> 4\r\n```\r\n\r\n### pluck - `$.pluck`\r\n\r\nRetrieves the value of a specified property from all elements in the array.\r\n\r\n```\r\nlet arr : Dictionary<String, Int>[] = [[\"age\": 20], [\"age\": 30], [\"age\": 40]]\r\n$.pluck(arr, value: \"age\") \r\n=> [20, 30, 40]\r\n```\r\n\r\n### pull - `$.pull`\r\n\r\nRemoves all provided values from the given array.\r\n\r\n```\r\n$.pull([3, 4, 5, 3, 5], values: 3, 5) \r\n=> [4]\r\n\r\n$.pull([3, 4, 5, 3, 5], values: 4) \r\n=> [3, 5, 3, 5]\r\n\r\n$.pull([3, 4, 5, 3, 5], values: 3, 4, 5) \r\n=> []\r\n```\r\n\r\n### range - `$.range`\r\n\r\nCreates an array of numbers (positive and/or negative) progressing from start up to but not including end.\r\n\r\n```\r\n$.range(4) \r\n=> [0, 1, 2, 3]\r\n\r\n$.range(1, endVal: 5) \r\n=> [1, 2, 3, 4]\r\n\r\n$.range(0, endVal: 20, incrementBy: 5) \r\n=> [0, 5, 10, 15]\r\n```\r\n\r\n### sample - `$.sample`\r\n```\r\nlet arr : Int[] = [2, 1, 2, 3, 4]\r\n$.contains(arr, value: $.sample(arr))\r\n=> true\r\n```\r\n\r\n### sequence - `$.sequence`\r\n\r\nCreates an array of an arbitrary sequence. Especially useful with builtin ranges.\r\n\r\n```\r\n$.sequence(0..4) \r\n=> [0, 1, 2, 3]\r\n\r\n$.sequence(-2.0..2.0) \r\n=> [-2.0, -1.0, 0.0, 1.0]\r\n\r\n$.sequence((0..20).by(5)) \r\n=> [0, 5, 10, 15]\r\n\r\n$.sequence(\"abc\") \r\n=> [\"a\", \"b\", \"c\"]\r\n```\r\n\r\n### remove - `$.remove`\r\n\r\nRemoves all elements from an array that the callback returns true.\r\n\r\n```\r\nlet result = $.remove([1, 2, 3, 4, 5, 6]) { $0 == 2 || $0 == 3 }\r\nresult\r\n=> [1, 4, 5, 6]\r\n```\r\n\r\n### sortedIndex - `$.sortedIndex`\r\n\r\nGives the smallest index at which a value should be inserted into a given the array is sorted.\r\n\r\n```\r\n$.sortedIndex([3, 4, 6, 10], value: 5)\r\n=> 2\r\n\r\n$.sortedIndex([10, 20, 30, 50], value: 40)\r\n=> 3\r\n```\r\n\r\n### union - `$.union`\r\n\r\nCreates an array of unique values, in order, of the provided arrays.\r\n\r\n```\r\n$.union([1, 2, 3], [5, 2, 1, 4], [2, 1]) \r\n=> [1, 2, 3, 4, 5]\r\n```\r\n\r\n### merge - `$.merge`\r\n\r\nCreates an array of all values, including duplicates, of the arrays in the order they are provided.\r\n\r\n```\r\nlet arr  = [1, 5]\r\nlet arr2 = [2, 4]\r\nlet arr3 = [5, 6]\r\nlet result = $.merge(arrays: arr, arr2, arr3)\r\nresult\r\n=> [1, 5, 2, 4, 5, 6]\r\n```\r\n\r\n### uniq - `$.uniq`\r\n\r\nCreates a duplicate-value-free version of an array.\r\n\r\n```\r\n$.uniq([1, 2, 1, 3, 1])\r\n=> [1, 2, 3]\r\n```\r\n\r\n### without - `$.without`\r\n\r\nCreates an array excluding all provided values.\r\n\r\n```\r\n$.without([3, 4, 5, 3, 5], values: 3, 5)\r\n=> [4]\r\n\r\n$.without([3, 4, 5, 3, 5], values: 4)\r\n=> [3, 5, 3, 5]\r\n\r\n$.without([3, 4, 5, 3, 5], values: 3, 4, 5)\r\n=> []\r\n```\r\n\r\n### xor - `$.xor`\r\n\r\nCreates an array that is the symmetric difference of the provided arrays.\r\n\r\n```\r\n$.xor([1, 2, 3], [5, 2, 1, 4])\r\n=> [3, 4, 5]\r\n```\r\n\r\n### zip - `$.zip`\r\n\r\nCreates an array of grouped elements, the first of which contains the first elements of the given arrays.\r\n\r\n```\r\n$.zip([\"fred\", \"barney\"], [30, 40], [true, false]) as NSObject[] \r\n=> [[\"fred\", 30, true], [\"barney\", 40, false]]\r\n```\r\n\r\n### zipObject - `$.zipObject`\r\n\r\nCreates an object composed from arrays of keys and values.\r\n\r\n```\r\n$.zipObject([\"fred\", \"barney\"], values: [30, 40]) as Dictionary<String, Int> \r\n=> [\"fred\": 30, \"barney\": 40]\r\n```\r\n\r\n### partition - `$.partition`\r\n\r\nProduces an array of arrays, each containing n elements, each offset by step. Stops after a partition is less than n length.\r\n\r\n```\r\nlet arr = [1, 2, 3, 4, 5]\r\n$.partition(arr, n: 2)\r\n=> [[1, 2], [3, 4]]\r\n\r\n$.partition(arr, n: 4, step: 1)\r\n=> [[1, 2, 3, 4], [2, 3, 4, 5]]\r\n\r\n$.partition(arr, n: 4, step: 1, pad: nil)\r\n=> [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5]]\r\n\r\n$.partition(arr, n: 4, step: 1, pad: [6, 7, 8])\r\n=> [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]\r\n```\r\n\r\n### partitionAll - `$.partitionAll`\r\n\r\nProduces an array of arrays, each containing n elements, each offset by step. Continues after a partition is less than n length.\r\n\r\n```\r\n$.partitionAll([1, 2, 3, 4, 5], n:4, step: 1)\r\n=> [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5], [4, 5], [5]]\r\n```\r\n\r\n### partitionBy - `$.partitionBy`\r\n\r\nApplies a function to each element in array, splitting it each time the function returns a new value.\r\n\r\n```\r\n$.partitionBy([1, 2, 3, 4, 5]) { $0 % 2 == 0 }\r\n=> [[1], [2, 4], [3, 5], [6]]\r\n\r\n$.partitionBy([1, 7, 3, 6, 10, 12]) { $0 % 3 }\r\n=> [[1, 7], [3, 6], [10], [12]]\r\n```\r\n\r\n### Dictionary ###\r\n\r\n### keys - `$.keys`\r\n\r\nCreates an array of keys given a dictionary.\r\n\r\n```\r\n$.keys([\"Dog\": 1, \"Cat\": 2])\r\n=> [\"Dog\", \"Cat\"]\r\n```\r\n\r\n### values - `$.values`\r\n\r\nCreates an array of values given a dictionary\r\n\r\n```\r\n$.values([\"Dog\": 1, \"Cat\": 2])\r\n=> [1, 2]\r\n```\r\n\r\n### merge - `$.merge`\r\n\r\nMerges all of the dictionaries together and the latter dictionary overrides the value at a given key\r\n\r\n```\r\nlet dict: Dictionary<String, Int> = [\"Dog\": 1, \"Cat\": 2]\r\nlet dict2: Dictionary<String, Int> = [\"Cow\": 3]\r\nlet dict3: Dictionary<String, Int> = [\"Sheep\": 4]\r\n$.merge(dict, dictionaries: dict2, dict3)\r\n```\r\n\r\n### pick - `$.pick`\r\n\r\nCreates a shallow clone of a dictionary composed of the specified keys.\r\n\r\n```\r\n$.pick([\"Dog\": 1, \"Cat\": 2, \"Cow\": 3], keys: \"Dog\", \"Cow\")\r\n```\r\n\r\n### omit - `$.omit`\r\n\r\nCreates a shallow clone of a dictionary excluding the specified keys.\r\n\r\n```\r\n$.omit([\"Dog\": 1, \"Cat\": 2, \"Cow\": 3], keys: \"Cat\", \"Dog\")\r\n```\r\n\r\n### Object ###\r\n\r\n### tap - `$.tap`\r\n\r\nInvokes interceptor with the object and then returns object.\r\n\r\n```\r\nvar beatle = Car(name: \"Fusca\")\r\n$.tap(beatle, {$0.name = \"Beatle\"}).color = \"Blue\"\r\n```\r\n\r\n### Function ###\r\n\r\n### after - `$.after`\r\n\r\nCreates a function that executes passed function only after being called n times.\r\n\r\n```\r\nvar saves = [\"profile\", \"settings\"];\r\nlet asyncSave = { (function: () -> ()?) in\r\n   function() // Saving right away for testing but in real world would be async\r\n}\r\nvar isDone = false\r\nvar completeCallback = $.after(saves.count) {\r\n   isDone = true\r\n}\r\nfor elem in saves {\r\n   asyncSave(completeCallback)\r\n}\r\nisDone \r\n=> true\r\n```\r\n\r\n### bind - `$.bind`\r\n\r\nCreates a function that, when called, invokes func with the binding of arguments provided.\r\n\r\n```\r\nlet helloWorldFunc = $.bind({(T...) in T[0] + \" \" + T[1] + \" from \" + T[2] }, \"Hello\", \"World\", \"Swift\")\r\nhelloWorldFunc() \r\n=> \"Hello World from Swift\"\r\n```\r\n\r\n### partial - `$.partial`\r\n\r\nCreates a function that, when called, invokes func with any additional partial arguments prepended to those provided to the new function.\r\n\r\n```\r\nlet partialFunc = $.partial({(T...) in T[0] + \" \" + T[1] + \" from \" + T[2] }, \"Hello\")\r\npartialFunc(\"World\", \"Swift\") \r\n=> \"Hello World from Swift\"\r\n```\r\n\r\n### times - `$.times`\r\n\r\nCall a function n times and also passes the index. If a value is returned in the function then the times method will return an array of those values.\r\n\r\n```\r\nlet fun = $.bind({ (names: String...) -> String in\r\n   let people = $.join(names, separator: \" from \")\r\n   return \"Hello \\(people)\"\r\n   }, \"Ankur\", \"Swift\")\r\n$.times(2, function: fun) as String[] \r\n=> [\"Hello Ankur from Swift\", \"Hello Ankur from Swift\"]\r\n```\r\n\r\n### Chaining - `$(array: ...)`\r\n```\r\n$(array: [1, 2, 3])\r\n\r\n$(array: [1, 2, 3]).first() as Int \r\n=> 1\r\n\r\n$(array: [[1, 2], 3, [[4], 5]]).flatten().initial(2).value() as Int[] \r\n=> [1, 2, 3]\r\n\r\n$(array: [[1, 2], 3, [[4], 5]]).initial().flatten().first() as Int \r\n=> 1\r\n\r\nvar chain = $(array: [10, 20, 30, 40, 50])\r\nvar elements: Int[] = []\r\nchain.each { elements += $0 as Int }\r\nelements as Int[] \r\n=> [10, 20, 30, 40, 50]\r\n\r\nvar chain = $(array: [10, 20, 30, 40, 50])\r\nchain.all { ($0 as Int) < 100 } \r\n=> true\r\n\r\nchain.all { ($0 as Int) < 40 } \r\n=> false\r\n\r\nchain.any { ($0 as Int) < 40 } \r\n=> true\r\n```\r\n\r\n## Contributing ##\r\nIf you are interested in contributing\r\n\r\n1. Please fork this project\r\n2. Implement new methods or changes in the `Dollar.swift` file in the Classes folder\r\n3. Write tests in `DollarTests.swift` file in the DollarTests folder\r\n4. Submit a pull request.\r\n\r\n## Roadmap ##\r\n\r\nMore functions will be added and then ability to chain operations and lazily evaluation of chained expressions.\r\n\r\n\r\n## Why not extend collection? ##\r\n1. The project doesnt extend or monkey patch the collection using the extension features to keep it purely functional and\r\n2. To not override any methods via extensions if Apple decides to add those methods into the collection class themselves as part of the language update. This could lead to inconsistent behavior for those who use the library and those who don't.\r\n","google":"UA-51727665-1","note":"Don't delete this file! It's used internally to help with page regeneration."}